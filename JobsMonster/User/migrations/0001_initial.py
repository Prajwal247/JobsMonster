# Generated by Django 3.1.5 on 2021-01-14 04:00

import User.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=200, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=200, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('mobile', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('avatar', models.ImageField(upload_to='static/img')),
                ('is_staff', models.BooleanField(default=False, help_text='allocates whether the user is staff or not', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Allocates whether is active or not unselect this in case of deleting acounts', verbose_name='active')),
                ('Specialization', models.CharField(choices=[('RE', 'Recruiter'), ('AFNR', 'Agriculture,Food and Natural Resources'), ('A/C', 'Architecture and Construction'), ('Technology', 'Arts, Technology and Communications'), ('BMA', 'Business Management and Administration'), ('EDU', 'Education and Training'), ('FIN', 'Finance'), ('GOV', 'Government and Public Administration'), ('HS', 'Health Science'), ('HT', 'Hospitality and Tourism'), ('Humanservice', 'Human Service'), ('IT', 'Information Technology'), ('LAW', 'Law and Pulblic Safety'), ('Manufacture', 'Manufacturing'), ('sales', 'Sales and Marketing'), ('Eng/math', 'Engineering and Mathematics'), ('Trans', 'Transportation')], max_length=20)),
                ('Skills', models.TextField(blank=True, max_length=200, null=True)),
                ('location', models.CharField(max_length=200, null=True)),
                ('BioData', models.FileField(upload_to='static/biodata')),
                ('work_experience', models.CharField(help_text='Previous Workexperience blank if not worked yet', max_length=250)),
                ('currently_employed', models.CharField(help_text='Currently employed if any', max_length=50)),
                ('pay_rate', models.FloatField(help_text='Expected pay rate per hour')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('Gender', models.CharField(blank=True, default='', help_text='gender of the user', max_length=10, null=True)),
                ('DOB', models.CharField(blank=True, help_text='Date of birth of the user', max_length=20, null=True)),
                ('Nationality', models.CharField(blank=True, help_text='Nationality of the user', max_length=25, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', User.models.UserManager()),
            ],
        ),
    ]
